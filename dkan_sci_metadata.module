<?php
/**
 * @file
 * Code for the DKAN Science Metadata feature.
 */

include_once 'dkan_sci_metadata.features.inc';

/**
 * Implements hook_taxonomy_fixtures_vocabulary().
 */
function dkan_sci_metadata_taxonomy_fixtures_vocabulary() {
  return array(
    'sci_author_id_type' => array(
      'export_path' => drupal_get_path('module', 'dkan_sci_metadata') . '/data',
      'map' => array(
        'name' => 'name',
        'weight' => 'weight',
        'uuid' => 'uuid',
        'description' => 'description',
      ),
    ),
  );
}

/**
 * Implements hook_node_validate().
 */
function dkan_sci_metadata_node_validate($node, $form, &$form_state) {
  if ($form['type']['#value'] == 'dataset') {
    // Validate extended metadata fields.
    if (count($form['field_metadata_extended'][LANGUAGE_NONE])) {
      foreach ($form['field_metadata_extended'][LANGUAGE_NONE] as $key => $value) {
        if (is_numeric($key)) {
          if (
            isset($value['#entity']) &&
            isset($value['#bundle']) &&
            (
              $value['#bundle'] == DkanSciMetadataAuthor::AUTHOR_BUNDLE ||
              $value['#bundle'] == 'sci_review'
            )
          ) {
            if ($value['#bundle'] == DkanSciMetadataAuthor::AUTHOR_BUNDLE) {
              // Validate on this paragraphs item.
              _dkan_sci_metadata_validate_sci_author($value, $key);
            }
            elseif (isset($value['#bundle']) && $value['#bundle'] == 'sci_review') {
              // Sci_review can contain multiple authors, needs iteration.
              foreach ($value['field_sci_peer_reviewer'][LANGUAGE_NONE] as $reviewer_key => $reviewer_value) {
                if (is_numeric($reviewer_key)) {
                  $form_key = $key . '][field_sci_peer_reviewer][' . LANGUAGE_NONE . '][' . $reviewer_key;
                  _dkan_sci_metadata_validate_sci_author($reviewer_value, $form_key);
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function dkan_sci_metadata_entity_presave($entity, $type) {
  // Populate author name field.
  if ($type == 'paragraphs_item') {
    if ($entity->field_name == 'field_metadata_extended') {
      switch ($entity->bundle) {
        case 'sci_author':
          _dkan_sci_metadata_populate_name($entity);
          break;

        case 'sci_review':
          $reviewers = $entity->field_sci_peer_reviewer[LANGUAGE_NONE];
          if ($reviewers) {
            foreach ($reviewers as $reviewer_item) {
              $reviewer_entity = paragraphs_item_load($reviewer_item['value']);
              _dkan_sci_metadata_populate_name($reviewer_entity);

              $reviewer_entity->save(TRUE);
            }
            // Set Peer Reviewed flag when a reviewer is added.
            $entity->field_sci_peer_reviewed[LANGUAGE_NONE][0]['value'] = 1;
          } else {
            $entity->field_sci_peer_reviewed[LANGUAGE_NONE][0]['value'] = 0;
          }
          break;
      }
    }
    elseif ($entity->bundle == 'sci_author') {
      _dkan_sci_metatdata_supertrim_fields($entity, ['field_sci_author_name']);
    }
    elseif ($entity->bundle == 'sci_funding_source') {
      _dkan_sci_metatdata_supertrim_fields($entity, ['field_sci_project_grant_number']);
    }
  }
  elseif ($type == 'node' && $entity->type == 'dataset') {
    $entity->title = _dkan_sci_metatdata_supertrim($entity->title);
    _dkan_sci_metatdata_supertrim_fields($entity, ['field_contact_name', 'field_contact_email']);
  }
}

/**
 * Implements hook_default_search_api_index_alter().
 */
function dkan_sci_metadata_default_search_api_index_alter(&$defaults) {
  if (isset($defaults['datasets'])) {
    // Adds Author Name / Type to search index.
    $defaults['datasets']->options['fields']['field_metadata_extended:field_sci_author_name'] = array(
      'type' => 'list<string>',
    );
    $defaults['datasets']->options['fields']['field_metadata_extended:field_sci_author_id_type:name'] = array(
      'type' => 'list<string>',
    );
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function dkan_sci_metadata_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name']) && $element['#field_name'] == 'field_sci_peer_reviewer') {
    // Replace "Add Science Author" with "Add Reviewer"
    $element['add_more']['add_more_bundle_sci_author']['#value'] = 'Add Reviewer';
  }
  elseif (isset($element['#entity_type']) && $element['#entity_type'] == 'paragraphs_item') {
    if ($context['form']['#bundle'] == 'sci_review') {
      // Replace all titles/descriptions from Author to Reviewer, preserve case.
      $element['#title'] = preg_replace("/author/", "reviewer", $element['#title']);
      $element['#title'] = preg_replace("/Author/", "Reviewer", $element['#title']);
      $element['#description'] = preg_replace("/author/", "reviewer", $element['#description']);
      $element['#description'] = preg_replace("/Author/", "Reviewer", $element['#description']);

      if (isset($element['value'])) {
        $element['value']['#title'] = preg_replace("/author/", "reviewer", $element['value']['#title']);
        $element['value']['#title'] = preg_replace("/Author/", "Reviewer", $element['value']['#title']);
        $element['value']['#description'] = preg_replace("/author/", "reviewer", $element['value']['#description']);
        $element['value']['#description'] = preg_replace("/Author/", "Reviewer", $element['value']['#description']);
      }
    }
  }
}

  /**
   * Validate Science Author form item.
   *
   * @param array $value
   *   Form array of sci_author paragraph item.
   */
function _dkan_sci_metadata_validate_sci_author($value, $form_key) {
  $author_id_type = NULL;
  $author_id = NULL;

  if (
    isset($value['field_sci_author_name'][LANGUAGE_NONE][0]['value']['#value']) &&
    !empty($value['field_sci_author_name'][LANGUAGE_NONE][0]['value']['#value'])
  ) {
    // @todo Enforce last, first name format.
  }
  // Validate author ID if possible.
  $author_id_type_field = $value['field_sci_author_id_type'][LANGUAGE_NONE];
  $author_id_field = $value['field_sci_author_id'][LANGUAGE_NONE];

  if (isset($author_id_type_field)) {
    $author_id_type = strtolower($author_id_type_field['#options'][$author_id_type_field['#value']]);
  }
  if (isset($author_id_field)) {
    $author_id = $author_id_field[0]['value']['#value'];
  }

  if (!empty($author_id_type) && !empty($author_id)) {
    switch ($author_id_type) {
      case DkanSciMetadataAuthorOrcid::AUTHOR_ID_TYPE:
        // Validate ORCID author ID.
        $error_msg = DkanSciMetadataAuthorOrcid::validate($author_id);
        if (!empty($error_msg)) {
          form_set_error('field_metadata_extended][' . LANGUAGE_NONE . '][' . $form_key . '][field_sci_author_id', $error_msg);
        }
        break;
    }
  }
}

/**
 * Populate name field in sci_author paragraph entity item.
 *
 * @param object $entity
 *   Sci Author Paragraphs Item Entity
 */
function _dkan_sci_metadata_populate_name(&$entity) {
  $author_id_type_field = $entity->field_sci_author_id_type[LANGUAGE_NONE];
  $author_id_field = $entity->field_sci_author_id[LANGUAGE_NONE];

  if (count($author_id_type_field) && count($author_id_field)) {
    $author_id_type_tid = strtolower($author_id_type_field[0]['tid']);
    $term = taxonomy_term_load($author_id_type_tid);
    $author_id_type = $term->name;
    $author_id = $author_id_field[0]['value'];

    switch ($author_id_type) {
      // Populate author name from ORCID biography data.
      case DkanSciMetadataAuthorOrcid::AUTHOR_TAXONOMY_NAME:
        // Only replace blank author names.
        if (!count($entity->field_sci_author_name[LANGUAGE_NONE])) {
          $entity->field_sci_author_name[LANGUAGE_NONE][0]['value'] = DkanSciMetadataAuthorOrcid::getName($author_id);
        }
        break;
    }
  }
}

/**
 * Trim and remove extra spaces from field values.
 *
 * @param $entity
 *   The entity containing fields to trim.
 * @param array $field_names
 *  The names of one or more fields to trim.
 */
function _dkan_sci_metatdata_supertrim_fields (&$entity, array $field_names) {
  foreach ($field_names as $field_name) {
    if (!empty($entity->$field_name) && is_array($entity->$field_name[LANGUAGE_NONE])) {
      foreach ($entity->$field_name[LANGUAGE_NONE] as &$field) {
        $field['value'] = _dkan_sci_metatdata_supertrim($field['value']);
      }
    }
  }
}

/**
 * Trims string and also replaces multiple spaces with a single space.
 *
 * @param string $string
 *   The string to trim.
 * @return string
 *   The trimmed string
 */
function _dkan_sci_metatdata_supertrim ($string) {
  $new_value = preg_replace('/[ ]+/', ' ', $string);
  if (!empty($new_value)) {
    $string = $new_value;
  }
  $string = trim($string);
  return $string;
}

/**
 * Enables facets for author fields.
 */
function _dkan_sci_metadata_enable_facets() {
  $searchers = array('search_api@datasets');
  foreach ($searchers as $searcher) {
    $realm = "block";
    $facets_to_enable = array('field_metadata_extended:field_sci_author_name','field_metadata_extended:field_sci_author_id_type:name');

    $adapter = facetapi_adapter_load($searcher);
    $facet_info = facetapi_get_facet_info($searcher);

    foreach (array_keys($facet_info) as $item) {
      $facet = facetapi_facet_load($item, $searcher);
      if (in_array($item, $facets_to_enable)) {
        $facet_settings = $adapter->getFacet($facet)->getSettings($realm);
        $facet_settings->enabled = 1;
        ctools_export_crud_save('facetapi', $facet_settings);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function dkan_sci_metadata_field_formatter_info() {
  return array(
    'render_as_link' => array(
      'label' => t('Render textfield as link if the content is an url or email'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function dkan_sci_metadata_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'render_as_link':
      foreach ($items as $delta => $item) {
        $output = $item['safe_value'];
        if (filter_var($output, FILTER_VALIDATE_EMAIL) || filter_var($output, FILTER_VALIDATE_URL)) {
          $output = check_markup($output);
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }
  return $element;
}

function dkan_sci_metadata_preprocess_node(&$variables) {
  // Grab our citation paragraphs, and place in the main node table.
  if ($variables['type'] === 'dataset' && $variables['view_mode'] === 'full') {
    dkan_sci_metadata_metadata_table($variables);
  }
}

function dkan_sci_metadata_metadata_table(&$variables) {
  if (!empty($variables['content']['field_metadata_extended']['#items'])) {
    foreach($variables['content']['field_metadata_extended']['#items'] as $delta => $field_metadata_extended_item) {
      // Load what we assume to be the main science metadata item, and make
      // sure it's the right bundle.
      $extended_metadata = paragraphs_item_load($field_metadata_extended_item['value']);
      // Get our list of science fields and sort according to display.
      $metadata_fields = array();
      foreach(field_info_instances('paragraphs_item', $extended_metadata->bundle) as $field) {
        $metadata_fields[$field['display']['default']['weight']] = $field;
      }
      ksort($metadata_fields);
      $rows = array();
      foreach($metadata_fields as $field_info) {
        dkan_sci_metadata_table_add_field($rows, $field_info, $extended_metadata);
      }
      // Replace the whole extended metadata field with our table.
      $field_instance = field_info_instance('node', 'field_metadata_extended', 'dataset');
      $extended_metadata_table = array(
        '#theme' => 'table',
        '#header' => array(t('Field'), t('Value')),
        '#rows' => $rows,
        '#weight' => $field_instance['display']['default']['weight'],
        '#attributes' => array('class' => array('extended-metadata')),
      );
      $variables['content']['field_metadata_extended'][$delta]['entity']['paragraphs_item'][$extended_metadata->item_id] = $extended_metadata_table;
    }
  }
}
  
function dkan_sci_metadata_table_add_field(&$rows, $field_info, $extended_metadata) {
  if (!empty($extended_metadata->{$field_info['field_name']})) {
    $row_value = field_view_field('paragraphs_item', $extended_metadata, $field_info['field_name'], 'full');
    $row = array();
    $row[] = array('data' => $field_info['label'], 'class' => array('field-label'));
    $row[] = array('data' => $row_value, 'class' => array('field-content'));
    $rows[] = $row;
  }
}
