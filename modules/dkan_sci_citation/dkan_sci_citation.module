<?php

/**
 * @file
 * Code for the DKAN Science Metadata - Citation feature.
 */

include drupal_get_path('module', 'dkan_sci_citation') . '/includes/vendor/autoload.php';
include drupal_get_path('module', 'dkan_sci_citation') . '/includes/CitationFactory.php';

include_once 'dkan_sci_citation.features.inc';

use Seboettg\CiteProc\StyleSheet;
use Seboettg\CiteProc\CiteProc;

/**
 * Implements hook_module_implements_alter().
 */
function dkan_sci_citation_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'form_alter') {
    $group = $implementations['dkan_sci_citation'];
    unset($implementations['dkan_sci_citation']);
    $implementations['dkan_sci_citation'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function dkan_sci_citation_form_alter(&$form, &$form_state, $form_id) {

  if (array_key_exists('field_metadata_extended', $form)) {
    $path = drupal_get_path('module', 'dkan_sci_citation');
    drupal_add_js("$path/js/dkan_sci_citation.js");
    drupal_add_css("$path/css/dkan_sci_citation.css");

    // Used for custom js op to determine environment.
    global $theme;
    drupal_add_js(array(
      'citations' => array(
        'themeName' => $theme,
      ),
    ), 'setting');

    $form['field_dkan_cite_data']['#access'] = 0;
    $citation = FALSE;
    $field_language = $form['field_metadata_extended']['#language'];

    // Check to see if at least one of the paragraphs is a citation.
    foreach (element_children($form['field_metadata_extended'][$field_language]) as $key) {
      $element = $form['field_metadata_extended'][$field_language][$key];
      if (isset($element['#bundle']) && $element['#bundle'] === 'sci_citation') {
        $citation = TRUE;
      }
    }

    if ($citation) {

      // Attach custom js to handle states for citation paragraphs.
      $form['#after_build'][] = '_dkan_sci_citation_states';
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function dkan_sci_citation_node_validate($node, $form, &$form_state) {
  if ($form['type']['#value'] === 'dataset') {
    // Validate extended metadata fields.
    if (count($form['field_metadata_extended'][LANGUAGE_NONE])) {
      foreach ($form['field_metadata_extended'][LANGUAGE_NONE] as $key => $value) {
        if (is_numeric($key)) {
          if (isset($value['#entity']) && isset($value['#bundle']) &&
              $value['#bundle'] === 'sci_citation') {
            _dkan_sci_citation_validate_sci_citation($value, $key);
          }
        }
      }
    }
  }
}

/**
 * Validate Citation form items.
 *
 * @param array $value
 *   Form array of sci_citation paragraph item.
 */
function _dkan_sci_citation_validate_sci_citation($value, $form_key) {
  $new_citation = ($value['#entity']->is_new) ? TRUE : FALSE;
  $doi = $value['field_dkan_cite_doi'][LANGUAGE_NONE][0]['value']['#value'];
  $bibtex = $value['field_dkan_cite_bibtex'][LANGUAGE_NONE][0]['value']['#value'];

  $prev_doi = (!empty($value['#entity']->field_dkan_cite_doi[LANGUAGE_NONE][0]['value']))
    ? $value['#entity']->field_dkan_cite_doi[LANGUAGE_NONE][0]['value'] : '';
  $prev_bibtex = (!empty($value['#entity']->field_dkan_cite_bibtex[LANGUAGE_NONE][0]['value']))
    ? $value['#entity']->field_dkan_cite_bibtex[LANGUAGE_NONE][0]['value'] : '';

  if ($new_citation || ($prev_doi !== $doi) || ($prev_bibtex !== $bibtex)) {
    if (!empty($doi)) {
      if (!empty($bibtex)) {
        // Values for DOI and Bibtex supplied.
        $error_msg = t('Each Extended Metadata Citation is limited to a single lookup - either a DOI or Bibtex value.');
        form_set_error('field_metadata_extended][' . LANGUAGE_NONE . '][' . $form_key, $error_msg);
      }
      else {
        if (!_dkan_sci_citation_is_valid_doi($doi)) {
          // Invalid DOI format.
          $error_msg = t('DOI not in the format: 10.1000/123456.');
          form_set_error('field_metadata_extended][' . LANGUAGE_NONE . '][' . $form_key . '][field_dkan_cite_doi', $error_msg);
        }
        else {
          $citation = _dkan_sci_citation_validate_doi($doi);
          $json = json_decode($citation);
          if (json_last_error() === JSON_ERROR_NONE) {
            // Assign citation value.
            // Currently handled by hook_entity_presave().
          }
          else {
            // Error with DOI lookkup.
            $error_msg = t('Error retrieving metadata for the supplied DOI.');
            form_set_error('field_metadata_extended][' . LANGUAGE_NONE . '][' . $form_key . '][field_dkan_cite_doi', $error_msg);
          }
        }
      }
    }
    elseif (empty($doi)) {
      if (empty($bibtex)) {
        $error_msg = t('Each Extended Metadata Citation requires at least one lookup - either a DOI or Bibtex value.');
        form_set_error('field_metadata_extended][' . LANGUAGE_NONE . '][' . $form_key, $error_msg);
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function dkan_sci_citation_entity_presave($entity, $type) {
  if ($type === 'paragraphs_item') {
    switch ($entity->bundle) {
      case 'sci_citation':

        $doi = (!empty($entity->field_dkan_cite_doi[LANGUAGE_NONE][0]['value']))
          ? $entity->field_dkan_cite_doi[LANGUAGE_NONE][0]['value'] : '';
        $bibtex = (!empty($entity->field_dkan_cite_bibtex[LANGUAGE_NONE][0]['value']))
          ? $entity->field_dkan_cite_bibtex[LANGUAGE_NONE][0]['value'] : '';

        if (!empty($doi)) {
          $citation = _dkan_sci_citation_validate_doi($doi);
          $json_decode = json_decode($citation);
          $json_save = json_encode($json_decode->message);
          $entity->field_dkan_cite_data[LANGUAGE_NONE][0]['value'] = $json_save;
        }
        elseif (!empty($bibtex)) {
          $entity->field_dkan_cite_data[LANGUAGE_NONE][0]['value'] = _dkan_sci_citation_process_bibtex($bibtex);
        }

        break;
    }

  }
}

/**
 * Options for admin to choose citation style.
 *
 * @param array $form
 *   Form array
 * @param array $form_state
 *   Form state array
 *
 * @return array
 *   Form array
 */
function dkan_sci_citation_form($form, &$form_state) {
  $options = array(
    'apa' => 'APA',
  );

  if (!empty(variable_get('dkan_sci_citation_modified'))) {
    $options = json_decode(variable_get('dkan_sci_citation_modified'));
  }
  $default = !empty(variable_get('dkan_sci_citation_style')) ? variable_get('dkan_sci_citation_style') : 'modern-language-association';
  $form['dkan_sci_citation_style'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#description' => t('Style will be reflected after node being viewed is resaved.'),
    '#title' => 'Pick Style',
    '#default_value' => $default,
  );

  $form['dkan_sci_citation_style_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Citation style form callback.
 *
 * @param array $form
 *   Form array
 * @param array $form_state
 *   Form state array
 */
function dkan_sci_citation_form_submit($form, &$form_state) {
  variable_set('dkan_sci_citation_style', $form_state['values']['dkan_sci_citation_style']);
  drupal_set_message(t('Style submitted'));
}

/**
 * Implements hook_field_display_alter().
 */
function dkan_sci_citation_field_display_alter(&$display, $context) {
  if ($context['field']['field_name'] === 'field_alt_object_id') {
    $context['instance']['label'] = 'PubAg';
  }

  elseif (!empty($params['citation']) && $params['type'] === 'doi') {

    $citation = _dkan_sci_citation_validate_doi($params['citation']);
    $json_decode = json_decode($citation);
    $json_save = json_encode($json_decode->message);
    $processed = _dkan_sci_citation_process_data($json_save);

    print $processed;
  }

  return '';
}

/**
 * Implements hook_menu().
 *
 * @return array
 *   Menu links.
 */
function dkan_sci_citation_menu() {
  $items = array();

  $items['admin/content/citation-style'] = array(
    'title' => 'Citation Style',
    'description' => 'Picks the citation style.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkan_sci_citation_form'),
    'access callback' => TRUE,
  );

  $items['citation-preview'] = array(
    'title' => 'Citation Preview',
    'page callback' => '_dkan_sci_citation_process_query',
    'delivery callback' => '_dkan_sci_citation_loader_ajax',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Handles our content load processing.
 */
function _dkan_sci_citation_loader_ajax($page_callback_result) {
  // Only render content.
  print drupal_render($page_callback_result);
}

/**
 * Generates a citation preview.
 *
 * @return string
 *   Html for citation modal preview
 */
function _dkan_sci_citation_process_query() {
  $params = drupal_get_query_parameters();

  if (!empty($params['citation']) && $params['type'] === 'bibtex') {
    $json = _dkan_sci_citation_process_bibtex($params['citation']);
    print _dkan_sci_citation_process_data($json);
  }

  elseif (!empty($params['citation']) && $params['type'] === 'doi') {

    $citation = _dkan_sci_citation_validate_doi($params['citation']);
    $json_decode = json_decode($citation);
    $json_save = json_encode($json_decode->message);
    $processed = _dkan_sci_citation_process_data($json_save);

    print $processed;
  }

  return '';
}

/**
 * After build function to add custom js to enable/disable citation inputs.
 *
 * @param array $form
 *   Form array
 * @param array $form_state
 *   Form state array
 *
 * @return array
 *   Altered form array
 */
function _dkan_sci_citation_states($form, &$form_state) {
  $path = drupal_get_path('module', 'dkan_sci_citation');
  drupal_add_js("$path/js/dkan_sci_citation.js");
  return $form;
}

function _dkan_sci_citation_validate_doi($doi) {
  $citation = NULL;
  $client = new RenanBr\CrossRefClient();

  try {
    $work = $client->request('works/' . $doi);
  } catch (Exception $e) {
    watchdog_exception('dkan_sci_metadata', $e, $message = NULL, $variables = array(), $severity = WATCHDOG_ERROR, $link = NULL);
  }

  if (is_array($work)) {
    $citation = json_encode($work);
  }
  else {
    $citation = 'DOI Error';
  }

  return $citation;
}

/**
 * Check if DIO is valid.
 *
 * @param string $doi
 *   DOI to check
 *
 * @return bool
 *   TRUE if valid, FALSE otherwise.
 */
function _dkan_sci_citation_is_valid_doi($doi) {
  return (bool) preg_match('/10\..+\/.+/', $doi);
}

/**
 * Converts DOI to html
 *
 * @param array $data
 *   DOI data
 *
 * @return string
 *   Html data for field
 */
function _dkan_sci_citation_process_data($data) {
  $citation = new \CitationFactory\CitationFactory();
  return $citation->convertData($data);
}

/**
 * Converts Bibtex to html
 *
 * @param array $data
 *   Bibtex data
 *
 * @return string
 *   Structured JSON for formatter.
 */
function _dkan_sci_citation_process_bibtex($data) {
  $citation = new \CitationFactory\CitationFactory();
  return $citation->convertBibtex($data);
}

/**
 * Implements hook_field_formatter_info().
 */
function dkan_sci_citation_field_formatter_info() {
  return array(
    'dkan_sci_cite' => array(
      'label' => t('Citation Formatter'),
      'field types' => array('text_long'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function dkan_sci_citation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $settings = $display['settings'];
  $element = array();

  if ($display['type'] == 'dkan_sci_cite') {
    foreach ($items as $delta => $item) {
      // Not a json array, so no special formatter.
      $element[$delta] = array('#markup' => $item['value']);
      $brace_check = substr($item['value'], 0, 1);
      // Json array needs the special formatter.
      if ($brace_check === '{') {
        $element[$delta] = array('#markup' => _dkan_sci_citation_process_data($item['value']));
      }
    }
  }

  return $element;
}
